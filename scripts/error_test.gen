// LuduScript 错误处理和边界情况测试文件
// 本文件专门测试各种错误情况和极端边界情况
// 注意：某些测试用例可能会导致解释器报错，这是预期行为

// ========== 数值边界测试 ==========

// 1. 极大数值测试
num(max_int_test) { 9223372036854775807 }    // 64位有符号整数最大值
num(min_int_test) { -9223372036854775808 }   // 64位有符号整数最小值

// 2. 浮点数精度测试
num(float_precision) { 0.123456789012345 }   // 高精度浮点数
num(very_small) { 0.000000000001 }           // 极小浮点数
num(scientific_notation) { 1.23e10 }         // 科学计数法 (如果支持)

// 3. 零值除法边界测试 (避免真正的除零)
num(near_zero_div) { 1.0 / 0.000001 }        // 接近除零的情况
num(zero_numerator) { 0 / 5 }                // 零作为被除数

// ========== 字符串边界测试 ==========

// 4. 极长字符串测试
str(long_string) { "这是一个非常长的字符串，用于测试解释器对长字符串的处理能力。它包含了中文字符、英文字符、数字123456789、特殊符号!@#$%^&*()以及各种标点符号。" }

// 5. 特殊字符测试
str(special_chars) { "!@#$%^&*()_+-=[]{}|;':,.<>?/~`" }
str(unicode_test) { "🎮🎯🎲🃏♠♥♦♣" }          // Unicode表情符号 (如果支持)

// 6. 转义字符边界测试
str(all_escapes) { "\n\t\r\"\\\0" }          // 所有转义字符
str(nested_quotes) { "外层\"内层\\\"嵌套\"引号" }

// ========== 表达式复杂度测试 ==========

// 7. 深度嵌套表达式
num(deep_expr) { ((((1 + 2) * 3) - 4) / 2) + ((5 * 6) - (7 + 8)) }

// 8. 复杂逻辑表达式
bool(complex_logic) { 
    ((5 > 3) && (2 < 4)) || ((10 >= 10) && !(7 == 8)) && ((1 != 2) || (3 <= 3))
}

// 9. 混合类型比较边界 (可能的类型错误)
// 注意：以下可能导致类型错误，取决于解释器实现
// bool(type_error1) { 5 == "5" }              // 数值与字符串比较
// bool(type_error2) { true > false }          // 布尔值比较

// ========== 变量作用域边界测试 ==========

// 10. 深度嵌套作用域
num(scope_test) {
    num(level1) { 1 }
    num(nested_result) {
        num(level2) { level1 + 2 }
        num(deeper_result) {
            num(level3) { level2 + 3 }
            num(final_result) {
                num(level4) { level3 + 4 }
            }
        }
    }
}

// 11. 变量名边界测试
num(a) { 1 }                                  // 单字符变量名
num(very_long_variable_name_with_underscores_and_numbers_123) { 42 }  // 长变量名
num(_underscore_start) { 1 }                  // 下划线开头 (如果允许)
num(中文变量名) { 100 }                        // 中文变量名 (如果支持)

// ========== 循环边界测试 ==========

// 12. 极大循环次数 (但仍在合理范围内)
num(large_loop_sum) { 0 }
for(i, 1, 1000) {
    num(large_loop_sum) { large_loop_sum + 1 }
}

// 13. 负数循环参数
num(negative_loop_sum) { 0 }
for(j, -5, -1) {
    num(negative_loop_sum) { negative_loop_sum + j }
}

// 14. 零步长测试 (可能导致错误)
// for(k, 1, 10, 0) {  // 零步长可能导致无限循环
//     num(zero_step) { k }
// }

// 15. 负步长测试
num(negative_step_sum) { 0 }
for(m, 10, 1, -1) {
    num(negative_step_sum) { negative_step_sum + m }
}

// ========== 深度嵌套控制结构测试 ==========

// 16. 深度嵌套if语句
num(deep_if_result) { 0 }
num(test_val) { 5 }
if(test_val > 0) {
    if(test_val > 2) {
        if(test_val > 4) {
            if(test_val > 6) {
                num(deep_if_result) { 4 }
            } else {
                num(deep_if_result) { 3 }
            }
        } else {
            num(deep_if_result) { 2 }
        }
    } else {
        num(deep_if_result) { 1 }
    }
}

// 17. 深度嵌套循环
num(deep_nested_sum) { 0 }
for(a, 1, 3) {
    for(b, 1, 3) {
        for(c, 1, 3) {
            for(d, 1, 2) {
                num(deep_nested_sum) { deep_nested_sum + (a * b * c * d) }
            }
        }
    }
}

// ========== 对象创建边界测试 ==========

// 18. 大量对象创建
for(obj_id, 8001, 8100) {
    obj("MassObject", obj_id) {
        num(id_copy) { obj_id }
        str(name) { "对象" + obj_id }
        bool(is_test) { true }
    }
}

// 19. 复杂对象属性
obj("ComplexObject", 9001) {
    str(name) { "复杂对象" }
    num(calculated_value) {
        num(base) { 100 }
        num(multiplier) { 3 }
        num(bonus) { base * multiplier + 50 }
    }
    bool(complex_condition) {
        num(x) { 10 }
        num(y) { 20 }
        bool(result) { (x < y) && (x + y > 25) && !(x == y) }
    }
    str(dynamic_string) {
        str(prefix) { "动态" }
        str(suffix) { "字符串" }
        str(combined) { prefix + "_" + suffix + "_" + 9001 }
    }
}

// ========== 递归式变量定义测试 ==========

// 20. 斐波那契数列计算 (使用循环实现)
num(fib_10) {
    num(a) { 0 }
    num(b) { 1 }
    num(result) { 1 }
    
    for(i, 3, 10) {
        num(temp) { a + b }
        num(a) { b }
        num(b) { temp }
        num(result) { temp }
    }
}

// ========== 边界条件组合测试 ==========

// 21. 所有数据类型的默认值测试
num(default_num_check)
str(default_str_check)
bool(default_bool_check)

obj("DefaultTest", 9100) {
    num(default_in_obj)
    str(empty_in_obj)
    bool(false_in_obj)
}

// 22. 极限表达式长度测试
num(long_expression) { 
    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 
    11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 +
    21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30
}

// ========== 性能压力测试 ==========

// 23. 大量变量定义
for(var_id, 1, 50) {
    num(stress_var + var_id) { var_id * 2 }
}

// 24. 复杂计算密集型测试
num(computation_test) {
    num(result) { 0 }
    for(i, 1, 100) {
        for(j, 1, 10) {
            num(temp) { (i * j) % 7 + (i + j) % 3 }
            num(result) { result + temp }
        }
    }
}

// ========== 测试完成标记 ==========
obj("ErrorTestComplete", 9999) {
    str(message) { "LuduScript错误处理和边界测试完成" }
    num(total_boundary_tests) { 24 }
    bool(stress_test_passed) { true }
    str(note) { "某些测试可能触发预期的错误或警告" }
}