// LuduScript 全面语法测试文件
// 本文件测试所有语法特性，包括正常情况、边界情况和错误处理

// ========== 基本数据类型测试 ==========

// 1. 数值类型测试
num(test_int) { 42 }                    // 整数
num(test_float) { 3.14159 }             // 浮点数
num(test_negative) { -100 }             // 负数
num(test_zero) { 0 }                    // 零值
num(test_large) { 999999999 }           // 大数值
num(test_default_num) { }                // 默认值测试 (应为0)

// 2. 字符串类型测试
str(test_string) { "Hello World" }      // 基本字符串
str(test_empty) { "" }                  // 空字符串
str(test_escape) { "Line1\nLine2\tTab\"Quote\\Backslash" }  // 转义字符
str(test_chinese) { "你好世界" }         // 中文字符串
str(test_default_str) { }                // 默认值测试 (应为"")

// 3. 布尔类型测试
bool(test_true) { true }                // 真值
bool(test_false) { false }              // 假值
bool(test_default_bool) { }              // 默认值测试 (应为false)

// ========== 复杂变量声明测试 ==========

// 4. 语句块变量声明
num(complex_calc) {
    num(a) { 10 }
    num(b) { 20 }
    num(c) { a + b * 2 }  // 最后一个变量作为值
}

str(complex_string) {
    str(prefix) { "Hello" }
    str(suffix) { "World" }
    str(result) { prefix + " " + suffix }
}

bool(complex_bool) {
    num(x) { 5 }
    num(y) { 10 }
    bool(result) { x < y && y > 0 }
}

// ========== 算术操作符测试 ==========

// 5. 基本算术运算
num(add_test) { 10 + 5 }                // 加法
num(sub_test) { 10 - 3 }                // 减法
num(mul_test) { 6 * 7 }                 // 乘法
num(div_test) { 20 / 4 }                // 除法
num(mod_test) { 17 % 5 }                // 取模

// 6. 运算优先级测试
num(precedence1) { 2 + 3 * 4 }          // 应为14
num(precedence2) { (2 + 3) * 4 }        // 应为20
num(precedence3) { 10 - 6 / 2 }         // 应为7
num(precedence4) { (10 - 6) / 2 }       // 应为2

// 7. 一元操作符测试
num(negative_test) { -42 }              // 负号
num(double_negative) { -(-10) }         // 双重负号
bool(not_test) { !true }                // 逻辑非
bool(not_false) { !false }              // 逻辑非假值

// ========== 比较操作符测试 ==========

// 8. 数值比较
bool(equal_test) { 5 == 5 }             // 相等
bool(not_equal_test) { 5 != 3 }         // 不等
bool(less_test) { 3 < 5 }               // 小于
bool(greater_test) { 7 > 4 }            // 大于
bool(less_equal_test) { 5 <= 5 }        // 小于等于
bool(greater_equal_test) { 6 >= 6 }     // 大于等于

// 9. 字符串比较
bool(str_equal) { "abc" == "abc" }      // 字符串相等
bool(str_not_equal) { "abc" != "def" }  // 字符串不等

// ========== 逻辑操作符测试 ==========

// 10. 逻辑运算
bool(and_true) { true && true }         // 逻辑与 - 真
bool(and_false) { true && false }       // 逻辑与 - 假
bool(or_true) { false || true }         // 逻辑或 - 真
bool(or_false) { false || false }       // 逻辑或 - 假

// 11. 复杂逻辑表达式
bool(complex_logic1) { (5 > 3) && (2 < 4) }  // 复合条件
bool(complex_logic2) { (1 > 2) || (3 == 3) } // 复合条件
bool(complex_logic3) { !(5 < 3) && (10 >= 5) } // 带否定的复合条件

// ========== 条件语句测试 ==========

// 12. 基本if语句
num(if_result) { 0 }
if(5 > 3) {
    num(if_result) { 100 }
}

// 13. if-else语句
num(if_else_result) { 0 }
if(2 > 5) {
    num(if_else_result) { 1 }
} else {
    num(if_else_result) { 2 }
}

// 14. if-elif-else语句
num(grade) { 85 }
str(grade_letter) { "" }
if(grade >= 90) {
    str(grade_letter) { "A" }
} elif(grade >= 80) {
    str(grade_letter) { "B" }
} elif(grade >= 70) {
    str(grade_letter) { "C" }
} else {
    str(grade_letter) { "F" }
}

// 15. 嵌套条件语句
num(nested_result) { 0 }
num(x) { 10 }
num(y) { 5 }
if(x > 0) {
    if(y > 0) {
        num(nested_result) { x + y }
    } else {
        num(nested_result) { x - y }
    }
}

// ========== 循环语句测试 ==========

// 16. 基本for循环 (1参数)
num(sum1) { 0 }
for(i, 5) {
    num(sum1) { sum1 + i }
}

// 17. for循环 (2参数)
num(sum2) { 0 }
for(j, 3, 7) {
    num(sum2) { sum2 + j }
}

// 18. for循环 (3参数)
num(sum3) { 0 }
for(k, 2, 10, 2) {
    num(sum3) { sum3 + k }
}

// 19. 嵌套循环
num(nested_sum) { 0 }
for(outer, 1, 3) {
    for(inner, 1, 2) {
        num(nested_sum) { nested_sum + outer * inner }
    }
}

// 20. 循环中的条件语句
num(conditional_sum) { 0 }
for(m, 1, 10) {
    if(m % 2 == 0) {
        num(conditional_sum) { conditional_sum + m }
    }
}

// 21. break语句测试
num(break_sum) { 0 }
for(n, 1, 100) {
    if(n > 5) {
        break
    }
    num(break_sum) { break_sum + n }
}

// 22. continue语句测试
num(continue_sum) { 0 }
for(p, 1, 10) {
    if(p % 2 == 0) {
        continue
    }
    num(continue_sum) { continue_sum + p }
}

// ========== 对象创建测试 ==========

// 23. 基本对象创建
obj("Card", 1001) {
    str(name) { "火球术" }
    num(cost) { 3 }
    num(damage) { 4 }
    bool(is_spell) { true }
}

// 24. 使用变量作为对象属性
num(card_id) { 1002 }
str(card_name) { "治疗药水" }
num(heal_amount) { 50 }
obj("Item", card_id) {
    str(name) { card_name }
    num(heal) { heal_amount }
    bool(consumable) { true }
}

// 25. 循环创建多个对象
for(weapon_id, 2001, 2005) {
    obj("Weapon", weapon_id) {
        str(name) { "剑" + weapon_id }
        num(attack) { weapon_id - 2000 + 10 }
        num(durability) { 100 }
        bool(is_magical) { weapon_id % 2 == 0 }
    }
}

// 26. 条件创建对象
for(monster_level, 1, 3) {
    if(monster_level == 1) {
        obj("Monster", 3000 + monster_level) {
            str(name) { "史莱姆" }
            num(hp) { 10 }
            num(attack) { 2 }
            bool(is_boss) { false }
        }
    } elif(monster_level == 2) {
        obj("Monster", 3000 + monster_level) {
            str(name) { "兽人" }
            num(hp) { 25 }
            num(attack) { 5 }
            bool(is_boss) { false }
        }
    } else {
        obj("Monster", 3000 + monster_level) {
            str(name) { "龙" }
            num(hp) { 100 }
            num(attack) { 20 }
            bool(is_boss) { true }
        }
    }
}

// 27. 复杂对象属性计算
num(base_stats) { 10 }
for(hero_id, 4001, 4003) {
    obj("Hero", hero_id) {
        str(name) { "英雄" + (hero_id - 4000) }
        num(level) { hero_id - 4000 }
        num(hp) {
            num(level_bonus) { (hero_id - 4000) * 5 }
            num(total_hp) { base_stats + level_bonus }
        }
        num(mp) {
            num(level_bonus) { (hero_id - 4000) * 3 }
            num(total_mp) { base_stats + level_bonus }
        }
        bool(is_unlocked) { (hero_id - 4000) <= 2 }
    }
}

// ========== 边界情况测试 ==========

// 28. 零值和边界值
num(zero_div_safe) { 10 / 1 }           // 避免除零
num(large_calc) { 999999 + 1 }          // 大数计算
num(small_calc) { 1 - 999999 }          // 负数结果

// 29. 空循环
num(empty_loop_sum) { 0 }
for(empty, 5, 3) {  // 起始值大于结束值
    num(empty_loop_sum) { empty_loop_sum + 1 }  // 不应执行
}

// 30. 单次循环
num(single_loop_result) { 0 }
for(single, 5, 5) {
    num(single_loop_result) { 42 }
}

// ========== 复杂综合测试 ==========

// 31. 游戏卡牌生成系统
num(card_series) { 5000 }
for(rarity, 1, 4) {
    str(rarity_name) { "" }
    num(base_cost) { 0 }
    
    if(rarity == 1) {
        str(rarity_name) { "普通" }
        num(base_cost) { 1 }
    } elif(rarity == 2) {
        str(rarity_name) { "稀有" }
        num(base_cost) { 3 }
    } elif(rarity == 3) {
        str(rarity_name) { "史诗" }
        num(base_cost) { 5 }
    } else {
        str(rarity_name) { "传说" }
        num(base_cost) { 7 }
    }
    
    for(card_num, 1, 3) {
        num(card_id) { card_series + rarity * 100 + card_num }
        obj("GameCard", card_id) {
            str(name) { rarity_name + "卡牌" + card_num }
            num(cost) { base_cost + (card_num - 1) }
            num(power) { rarity * 2 + card_num }
            num(rarity_level) { rarity }
            bool(is_legendary) { rarity == 4 }
            str(description) { "这是一张" + rarity_name + "级别的卡牌" }
        }
    }
}

// 32. 装备强化系统
num(equipment_base_id) { 6000 }
for(equipment_type, 1, 3) {
    str(type_name) { "" }
    num(base_value) { 0 }
    
    if(equipment_type == 1) {
        str(type_name) { "武器" }
        num(base_value) { 10 }
    } elif(equipment_type == 2) {
        str(type_name) { "防具" }
        num(base_value) { 8 }
    } else {
        str(type_name) { "饰品" }
        num(base_value) { 5 }
    }
    
    for(enhance_level, 0, 5) {
        num(equipment_id) { equipment_base_id + equipment_type * 100 + enhance_level }
        
        // 跳过+0装备
        if(enhance_level == 0) {
            continue
        }
        
        obj("Equipment", equipment_id) {
            str(name) { type_name + "+" + enhance_level }
            num(base_stat) { base_value }
            num(enhance_bonus) {
                num(bonus_per_level) { equipment_type * 2 }
                num(total_bonus) { bonus_per_level * enhance_level }
                total_bonus
            }
            num(final_value) { base_value + enhance_bonus }
            bool(is_enhanced) { enhance_level > 0 }
            bool(is_max_level) { enhance_level == 5 }
        }
        
        // 限制最高强化等级
        if(enhance_level >= 5) {
            break
        }
    }
}

// ========== 测试完成标记 ==========
obj("TestComplete", 9999) {
    str(message) { "LuduScript全面语法测试完成" }
    num(total_tests) { 32 }
    bool(all_passed) { true }
}