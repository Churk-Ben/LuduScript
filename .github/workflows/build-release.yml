name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: luduscript-linux
            executable_extension: ""
          - os: windows-latest
            artifact_name: luduscript-windows
            executable_extension: ".exe"
          - os: macos-latest
            artifact_name: luduscript-macos
            executable_extension: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2.0
      with:
        cmake-version: '3.25'

    - name: Setup build tools (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup Visual Studio environment (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -A x64
        
    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: luduscript-windows
        path: build/Release/luduscript.exe

    - name: Upload artifacts (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: build/luduscript${{ matrix.executable_extension }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        # 获取最新的标签版本
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # 提取版本号并递增
        if [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          MAJOR=${BASH_REMATCH[1]}
          MINOR=${BASH_REMATCH[2]}
          PATCH=${BASH_REMATCH[3]}
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
        else
          NEW_VERSION="v0.1.0"
        fi
        
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        
        # 处理 Linux 版本
        if [ -f "./artifacts/luduscript-linux/luduscript" ]; then
          cp "./artifacts/luduscript-linux/luduscript" "./release/luduscript-linux"
          chmod +x "./release/luduscript-linux"
        elif [ -f "./artifacts/luduscript-linux/bin/luduscript" ]; then
          cp "./artifacts/luduscript-linux/bin/luduscript" "./release/luduscript-linux"
          chmod +x "./release/luduscript-linux"
        fi
        
        # 处理 Windows 版本
        if [ -f "./artifacts/luduscript-windows/luduscript.exe" ]; then
          cp "./artifacts/luduscript-windows/luduscript.exe" "./release/luduscript-windows.exe"
        elif [ -f "./artifacts/luduscript-windows/bin/luduscript.exe" ]; then
          cp "./artifacts/luduscript-windows/bin/luduscript.exe" "./release/luduscript-windows.exe"
        elif [ -f "./artifacts/luduscript-windows/Release/luduscript.exe" ]; then
          cp "./artifacts/luduscript-windows/Release/luduscript.exe" "./release/luduscript-windows.exe"
        fi
        
        # 处理 macOS 版本
        if [ -f "./artifacts/luduscript-macos/luduscript" ]; then
          cp "./artifacts/luduscript-macos/luduscript" "./release/luduscript-macos"
          chmod +x "./release/luduscript-macos"
        elif [ -f "./artifacts/luduscript-macos/bin/luduscript" ]; then
          cp "./artifacts/luduscript-macos/bin/luduscript" "./release/luduscript-macos"
          chmod +x "./release/luduscript-macos"
        fi
        
        # 列出所有文件用于调试
        echo "Release files:"
        ls -la ./release/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: LuduScript ${{ steps.version.outputs.version }}
        body: |
          ## LuduScript ${{ steps.version.outputs.version }}
          
          自动构建发布版本
          
          ### 更改内容
          - 自动构建的发行版
          - 支持多平台：Linux、Windows、macOS
          
          ### 下载
          - **Linux**: luduscript-linux
          - **Windows**: luduscript-windows.exe  
          - **macOS**: luduscript-macos
        draft: false
        prerelease: false

    - name: Upload Linux Release Asset
      if: hashFiles('./release/luduscript-linux') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/luduscript-linux
        asset_name: luduscript-linux
        asset_content_type: application/octet-stream

    - name: Upload Windows Release Asset
      if: hashFiles('./release/luduscript-windows.exe') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/luduscript-windows.exe
        asset_name: luduscript-windows.exe
        asset_content_type: application/octet-stream

    - name: Upload macOS Release Asset
      if: hashFiles('./release/luduscript-macos') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/luduscript-macos
        asset_name: luduscript-macos
        asset_content_type: application/octet-stream